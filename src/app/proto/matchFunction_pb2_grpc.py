# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from app.proto import matchFunction_pb2 as app_dot_proto_dot_matchFunction__pb2


class MatchFunctionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStatCodes = channel.unary_unary(
                '/accelbyte.matchmaking.matchfunction.MatchFunction/GetStatCodes',
                request_serializer=app_dot_proto_dot_matchFunction__pb2.GetStatCodesRequest.SerializeToString,
                response_deserializer=app_dot_proto_dot_matchFunction__pb2.StatCodesResponse.FromString,
                )
        self.ValidateTicket = channel.unary_unary(
                '/accelbyte.matchmaking.matchfunction.MatchFunction/ValidateTicket',
                request_serializer=app_dot_proto_dot_matchFunction__pb2.ValidateTicketRequest.SerializeToString,
                response_deserializer=app_dot_proto_dot_matchFunction__pb2.ValidateTicketResponse.FromString,
                )
        self.EnrichTicket = channel.unary_unary(
                '/accelbyte.matchmaking.matchfunction.MatchFunction/EnrichTicket',
                request_serializer=app_dot_proto_dot_matchFunction__pb2.EnrichTicketRequest.SerializeToString,
                response_deserializer=app_dot_proto_dot_matchFunction__pb2.EnrichTicketResponse.FromString,
                )
        self.MakeMatches = channel.stream_stream(
                '/accelbyte.matchmaking.matchfunction.MatchFunction/MakeMatches',
                request_serializer=app_dot_proto_dot_matchFunction__pb2.MakeMatchesRequest.SerializeToString,
                response_deserializer=app_dot_proto_dot_matchFunction__pb2.MatchResponse.FromString,
                )
        self.BackfillMatches = channel.stream_stream(
                '/accelbyte.matchmaking.matchfunction.MatchFunction/BackfillMatches',
                request_serializer=app_dot_proto_dot_matchFunction__pb2.BackfillMakeMatchesRequest.SerializeToString,
                response_deserializer=app_dot_proto_dot_matchFunction__pb2.BackfillResponse.FromString,
                )


class MatchFunctionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetStatCodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnrichTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeMatches(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackfillMatches(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MatchFunctionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStatCodes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatCodes,
                    request_deserializer=app_dot_proto_dot_matchFunction__pb2.GetStatCodesRequest.FromString,
                    response_serializer=app_dot_proto_dot_matchFunction__pb2.StatCodesResponse.SerializeToString,
            ),
            'ValidateTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateTicket,
                    request_deserializer=app_dot_proto_dot_matchFunction__pb2.ValidateTicketRequest.FromString,
                    response_serializer=app_dot_proto_dot_matchFunction__pb2.ValidateTicketResponse.SerializeToString,
            ),
            'EnrichTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.EnrichTicket,
                    request_deserializer=app_dot_proto_dot_matchFunction__pb2.EnrichTicketRequest.FromString,
                    response_serializer=app_dot_proto_dot_matchFunction__pb2.EnrichTicketResponse.SerializeToString,
            ),
            'MakeMatches': grpc.stream_stream_rpc_method_handler(
                    servicer.MakeMatches,
                    request_deserializer=app_dot_proto_dot_matchFunction__pb2.MakeMatchesRequest.FromString,
                    response_serializer=app_dot_proto_dot_matchFunction__pb2.MatchResponse.SerializeToString,
            ),
            'BackfillMatches': grpc.stream_stream_rpc_method_handler(
                    servicer.BackfillMatches,
                    request_deserializer=app_dot_proto_dot_matchFunction__pb2.BackfillMakeMatchesRequest.FromString,
                    response_serializer=app_dot_proto_dot_matchFunction__pb2.BackfillResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'accelbyte.matchmaking.matchfunction.MatchFunction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MatchFunction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetStatCodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/accelbyte.matchmaking.matchfunction.MatchFunction/GetStatCodes',
            app_dot_proto_dot_matchFunction__pb2.GetStatCodesRequest.SerializeToString,
            app_dot_proto_dot_matchFunction__pb2.StatCodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/accelbyte.matchmaking.matchfunction.MatchFunction/ValidateTicket',
            app_dot_proto_dot_matchFunction__pb2.ValidateTicketRequest.SerializeToString,
            app_dot_proto_dot_matchFunction__pb2.ValidateTicketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnrichTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/accelbyte.matchmaking.matchfunction.MatchFunction/EnrichTicket',
            app_dot_proto_dot_matchFunction__pb2.EnrichTicketRequest.SerializeToString,
            app_dot_proto_dot_matchFunction__pb2.EnrichTicketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakeMatches(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/accelbyte.matchmaking.matchfunction.MatchFunction/MakeMatches',
            app_dot_proto_dot_matchFunction__pb2.MakeMatchesRequest.SerializeToString,
            app_dot_proto_dot_matchFunction__pb2.MatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BackfillMatches(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/accelbyte.matchmaking.matchfunction.MatchFunction/BackfillMatches',
            app_dot_proto_dot_matchFunction__pb2.BackfillMakeMatchesRequest.SerializeToString,
            app_dot_proto_dot_matchFunction__pb2.BackfillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
